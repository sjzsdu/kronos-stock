name: Build and Publish Kronos Stock Prediction App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'

env:
  REGISTRY: docker.io
  IMAGE_NAME: sjzsdu/kronos-china-stock-prediction

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1


    - name: Select a tag for runtime test
      id: picktag
      run: |
        set -euo pipefail
        FIRST_LINE="$(echo '${{ steps.meta.outputs.tags }}' | head -n1 | tr -d ' \t')"
        if [ -z "${FIRST_LINE}" ]; then
          echo "No tag parsed, fallback to latest" >&2
          FULL_TEST_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        else
          FULL_TEST_IMAGE="${FIRST_LINE}"
        fi
        echo "FULL_TEST_IMAGE=${FULL_TEST_IMAGE}" >> "$GITHUB_ENV"
        echo "Testing will use image: ${FULL_TEST_IMAGE}"

    - name: Test Docker image
      run: |
        set -euo pipefail
        echo "Testing image: ${FULL_TEST_IMAGE}"
        docker pull "${FULL_TEST_IMAGE}" || echo "Image already local"
        docker run --rm -d --name test-container -p 5002:5001 "${FULL_TEST_IMAGE}"
        for i in $(seq 1 30); do
          if curl -sf http://localhost:5002/api/health >/dev/null; then
            echo "Health check passed"
            break
          fi
          sleep 2
          if [ "$i" = 30 ]; then
            echo "Health check failed"
            docker logs test-container || true
            exit 1
          fi
        done
        docker stop test-container || true

    - name: Clean up test container on failure
      if: failure()
      run: docker rm -f test-container || true

    - name: Generate deployment info
      run: |
        echo "## ðŸš€ Deployment Information" >> $GITHUB_STEP_SUMMARY
        echo "### Docker Image Used For Test:" >> $GITHUB_STEP_SUMMARY
        echo "- ${FULL_TEST_IMAGE}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### All Tags:" >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Deploy Commands:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${FULL_TEST_IMAGE}" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d \\" >> $GITHUB_STEP_SUMMARY
        echo "  --name kronos-stock-app \\" >> $GITHUB_STEP_SUMMARY
        echo "  -p 5001:5001 \\" >> $GITHUB_STEP_SUMMARY
        echo "  -v \$(pwd)/prediction_results:/app/prediction_results \\" >> $GITHUB_STEP_SUMMARY
        echo "  -v \$(pwd)/cache:/app/cache \\" >> $GITHUB_STEP_SUMMARY
        echo "  --restart unless-stopped \\" >> $GITHUB_STEP_SUMMARY
        echo "  ${FULL_TEST_IMAGE}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
